angular.module("study",[]).run(["$rootScope","$location","$window",function(e,n,r){function t(n){for(var r=0;r<e.phrases.length;r++){var t=e.phrases[r];if(t.id==n)return t}}e.page="main",e.search="",e.phrases=window.phrases,e.edit=!1,e.scrollTop=function(){r.scrollTo(0,0)},e.open=function(e){n.url("edit/"+e.id)},e.$on("$locationChangeSuccess",function(){var r;"/add"===n.url()?e.edit=!0:(r=n.url().match(/^\/edit\/(.+)/))?(e.edit=t(r[1]),e.edit||n.url("/")):(e.edit=!1,"/"!==n.url()&&n.url("/"))})}]),angular.module("study").controller("EditController",["$scope","$rootScope","$http","$location",function(e,n,r,t){function o(){return{en:e.en,th:e.th,tags:e.tags}}function i(e,r){for(var t=0;t<n.phrases.length;t++){var o=n.phrases[t];if(o.id===e)return void angular.extend(o,r)}}function a(e){for(var r=0;r<n.phrases.length;r++)if(n.phrases[r].id===e)return void n.phrases.splice(r,1)}function s(e){console.log(e),alert("Sorry, something went wrong. Try again.")}e.empty=function(){e.id=null,e.en="",e.th="",e.tags=""},e.edit=function(n){angular.extend(e,n)},e.add=function(){var e=o();r.post("api/phrases",e).success(function(r){e.id=r.id,n.phrases.unshift(e)}).error(s),t.url("/")},e.update=function(){var n=o();r.put("api/phrases/"+e.id,n).success(function(){i(e.id,n)}).error(s),t.url("/")},e.destroy=function(n){n.preventDefault(),confirm("You really want to delete this phrase?")&&(r.delete("api/phrases/"+e.id).success(function(){a(e.id)}).error(s),t.url("/"))},angular.isObject(n.edit)?e.edit(n.edit):e.empty()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljL2J1aWxkLmpzIiwic291cmNlcyI6WyJzdHVkeS5qcyIsImNvbnRyb2xsZXJzL0VkaXRDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQUEsT0FBQSxZQUVBLEtBQUEsYUFBQSxZQUFBLFVBQUEsU0FBQSxFQUFBLEVBQUEsR0ErQkEsUUFBQSxHQUFBLEdBQ0EsSUFBQSxHQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsUUFBQSxPQUFBLElBQUEsQ0FDQSxHQUFBLEdBQUEsRUFBQSxRQUFBLEVBQ0EsSUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLElBaENBLEVBQUEsS0FBQSxPQUNBLEVBQUEsT0FBQSxHQUNBLEVBQUEsUUFBQSxPQUFBLFFBQ0EsRUFBQSxNQUFBLEVBRUEsRUFBQSxVQUFBLFdBQ0EsRUFBQSxTQUFBLEVBQUEsSUFHQSxFQUFBLEtBQUEsU0FBQSxHQUNBLEVBQUEsSUFBQSxRQUFBLEVBQUEsS0FHQSxFQUFBLElBQUEseUJBQUEsV0FDQSxHQUFBLEVBQ0EsVUFBQSxFQUFBLE1BQ0EsRUFBQSxNQUFBLEdBRUEsRUFBQSxFQUFBLE1BQUEsTUFBQSxtQkFDQSxFQUFBLEtBQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxNQUFBLEVBQUEsSUFBQSxPQUdBLEVBQUEsTUFBQSxFQUNBLE1BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxXQzVCQSxRQUFBLE9BQUEsU0FBQSxXQUFBLGtCQUFBLFNBQUEsYUFBQSxRQUFBLFlBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQThEQSxRQUFBLEtBQ0EsT0FDQSxHQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFJQSxRQUFBLEdBQUEsRUFBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsUUFBQSxFQUNBLElBQUEsRUFBQSxLQUFBLEVBRUEsV0FEQSxTQUFBLE9BQUEsRUFBQSxJQU1BLFFBQUEsR0FBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUNBLEdBQUEsRUFBQSxRQUFBLEdBQUEsS0FBQSxFQUVBLFdBREEsR0FBQSxRQUFBLE9BQUEsRUFBQSxHQU1BLFFBQUEsR0FBQSxHQUNBLFFBQUEsSUFBQSxHQUNBLE1BQUEsMkNBeEZBLEVBQUEsTUFBQSxXQUNBLEVBQUEsR0FBQSxLQUNBLEVBQUEsR0FBQSxHQUNBLEVBQUEsR0FBQSxHQUNBLEVBQUEsS0FBQSxJQUdBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsUUFBQSxPQUFBLEVBQUEsSUFJQSxFQUFBLElBQUEsV0FFQSxHQUFBLEdBQUEsR0FFQSxHQUFBLEtBQUEsY0FBQSxHQUNBLFFBQUEsU0FBQSxHQUNBLEVBQUEsR0FBQSxFQUFBLEdBQ0EsRUFBQSxRQUFBLFFBQUEsS0FFQSxNQUFBLEdBRUEsRUFBQSxJQUFBLE1BS0EsRUFBQSxPQUFBLFdBRUEsR0FBQSxHQUFBLEdBRUEsR0FBQSxJQUFBLGVBQUEsRUFBQSxHQUFBLEdBQ0EsUUFBQSxXQUNBLEVBQUEsRUFBQSxHQUFBLEtBRUEsTUFBQSxHQUVBLEVBQUEsSUFBQSxNQUlBLEVBQUEsUUFBQSxTQUFBLEdBRUEsRUFBQSxpQkFFQSxRQUFBLDRDQUVBLEVBQUEsT0FBQSxlQUFBLEVBQUEsSUFDQSxRQUFBLFdBQ0EsRUFBQSxFQUFBLE1BRUEsTUFBQSxHQUVBLEVBQUEsSUFBQSxPQXVDQSxRQUFBLFNBQUEsRUFBQSxNQUNBLEVBQUEsS0FBQSxFQUFBLE1BRUEsRUFBQSIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdzdHVkeScsIFtdKVxuXG4gIC5ydW4oZnVuY3Rpb24gKCRyb290U2NvcGUsICRsb2NhdGlvbiwgJHdpbmRvdykge1xuXG4gICAgJHJvb3RTY29wZS5wYWdlICAgID0gJ21haW4nO1xuICAgICRyb290U2NvcGUuc2VhcmNoICA9ICcnO1xuICAgICRyb290U2NvcGUucGhyYXNlcyA9IHdpbmRvdy5waHJhc2VzO1xuICAgICRyb290U2NvcGUuZWRpdCAgICA9IGZhbHNlO1xuXG4gICAgJHJvb3RTY29wZS5zY3JvbGxUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkd2luZG93LnNjcm9sbFRvKDAsMCk7XG4gICAgfTtcblxuICAgICRyb290U2NvcGUub3BlbiA9IGZ1bmN0aW9uIChwaHJhc2UpIHtcbiAgICAgICRsb2NhdGlvbi51cmwoJ2VkaXQvJyArIHBocmFzZS5pZCk7XG4gICAgfTtcblxuICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1hdGNoO1xuICAgICAgaWYgKCRsb2NhdGlvbi51cmwoKSA9PT0gJy9hZGQnKSB7XG4gICAgICAgICRyb290U2NvcGUuZWRpdCA9IHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChtYXRjaCA9ICRsb2NhdGlvbi51cmwoKS5tYXRjaCgvXlxcL2VkaXRcXC8oLispLykpIHtcbiAgICAgICAgJHJvb3RTY29wZS5lZGl0ID0gZmluZFBocmFzZShtYXRjaFsxXSk7XG4gICAgICAgIGlmICghJHJvb3RTY29wZS5lZGl0KSAkbG9jYXRpb24udXJsKCcvJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgJHJvb3RTY29wZS5lZGl0ID0gZmFsc2U7XG4gICAgICAgIGlmICgkbG9jYXRpb24udXJsKCkgIT09ICcvJykgJGxvY2F0aW9uLnVybCgnLycpO1xuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICBmdW5jdGlvbiBmaW5kUGhyYXNlKGlkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRyb290U2NvcGUucGhyYXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGhyYXNlID0gJHJvb3RTY29wZS5waHJhc2VzW2ldO1xuICAgICAgICBpZiAocGhyYXNlLmlkID09IGlkKSByZXR1cm4gcGhyYXNlO1xuICAgICAgfVxuICAgIH1cblxuICB9KTtcblxuIiwiYW5ndWxhci5tb2R1bGUoJ3N0dWR5JykuY29udHJvbGxlcignRWRpdENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKSB7XG5cblxuICAkc2NvcGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgJHNjb3BlLmlkICAgPSBudWxsO1xuICAgICRzY29wZS5lbiAgID0gJyc7XG4gICAgJHNjb3BlLnRoICAgPSAnJztcbiAgICAkc2NvcGUudGFncyA9ICcnO1xuICB9XG5cbiAgJHNjb3BlLmVkaXQgPSBmdW5jdGlvbiAocGhyYXNlKSB7XG4gICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCBwaHJhc2UpO1xuICB9XG5cblxuICAkc2NvcGUuYWRkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHBocmFzZSA9IGdldERhdGEoKTtcblxuICAgICRodHRwLnBvc3QoJ2FwaS9waHJhc2VzJywgcGhyYXNlKVxuICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBwaHJhc2UuaWQgPSByZXMuaWQ7XG4gICAgICAgICRyb290U2NvcGUucGhyYXNlcy51bnNoaWZ0KHBocmFzZSk7XG4gICAgICB9KVxuICAgICAgLmVycm9yKGVycik7XG5cbiAgICAkbG9jYXRpb24udXJsKCcvJyk7XG5cbiAgfTtcblxuXG4gICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgcGhyYXNlID0gZ2V0RGF0YSgpO1xuXG4gICAgJGh0dHAucHV0KCdhcGkvcGhyYXNlcy8nICsgJHNjb3BlLmlkLCBwaHJhc2UpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZVBocmFzZSgkc2NvcGUuaWQsIHBocmFzZSk7XG4gICAgICB9KVxuICAgICAgLmVycm9yKGVycik7XG5cbiAgICAkbG9jYXRpb24udXJsKCcvJyk7XG5cbiAgfTtcblxuICAkc2NvcGUuZGVzdHJveSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcblxuICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKCFjb25maXJtKCdZb3UgcmVhbGx5IHdhbnQgdG8gZGVsZXRlIHRoaXMgcGhyYXNlPycpKSByZXR1cm47XG5cbiAgICAkaHR0cC5kZWxldGUoJ2FwaS9waHJhc2VzLycgKyAkc2NvcGUuaWQpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVBocmFzZSgkc2NvcGUuaWQpO1xuICAgICAgfSlcbiAgICAgIC5lcnJvcihlcnIpO1xuXG4gICAgJGxvY2F0aW9uLnVybCgnLycpO1xuXG4gIH07XG5cblxuICBmdW5jdGlvbiBnZXREYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbjogJHNjb3BlLmVuLFxuICAgICAgdGg6ICRzY29wZS50aCxcbiAgICAgIHRhZ3M6ICRzY29wZS50YWdzXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBocmFzZShpZCwgZGF0YSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHJvb3RTY29wZS5waHJhc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGhyYXNlID0gJHJvb3RTY29wZS5waHJhc2VzW2ldO1xuICAgICAgaWYgKHBocmFzZS5pZCA9PT0gaWQpIHtcbiAgICAgICAgYW5ndWxhci5leHRlbmQocGhyYXNlLCBkYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlUGhyYXNlKGlkKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkcm9vdFNjb3BlLnBocmFzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICgkcm9vdFNjb3BlLnBocmFzZXNbaV0uaWQgPT09IGlkKSB7XG4gICAgICAgICRyb290U2NvcGUucGhyYXNlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlcnIobXNnKSB7XG4gICAgY29uc29sZS5sb2cobXNnKTtcbiAgICBhbGVydCgnU29ycnksIHNvbWV0aGluZyB3ZW50IHdyb25nLiBUcnkgYWdhaW4uJyk7XG4gIH1cblxuXG5cbiAgaWYgKGFuZ3VsYXIuaXNPYmplY3QoJHJvb3RTY29wZS5lZGl0KSkge1xuICAgICRzY29wZS5lZGl0KCRyb290U2NvcGUuZWRpdCk7XG4gIH0gZWxzZSB7XG4gICAgJHNjb3BlLmVtcHR5KCk7XG4gIH1cblxuXG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=