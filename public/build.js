angular.module("study",[]).run(["$rootScope","$location",function(e,t){function r(t){for(var r=0;r<e.phrases.length;r++){var n=e.phrases[r];if(n.id==t)return n}}e.page="main",e.search="",e.phrases=window.phrases,e.edit=!1,e.open=function(e){t.url("edit/"+e.id)},e.$on("$locationChangeSuccess",function(){var n;"/add"===t.url()?e.edit=!0:(n=t.url().match(/^\/edit\/(.+)/))?(e.edit=r(n[1]),e.edit||t.url("/")):(e.edit=!1,"/"!==t.url()&&t.url("/"))})}]),angular.module("study").controller("EditController",["$scope","$rootScope","$http","$location",function(e,t,r,n){function i(){return{en:e.en,th:e.th,tags:e.tags}}function o(e,r){for(var n=0;n<t.phrases.length;n++){var i=t.phrases[n];if(i.id===e)return void angular.extend(i,r)}}function a(e){for(var r=0;r<t.phrases.length;r++)if(t.phrases[r].id===e)return void t.phrases.splice(r,1)}function s(e){console.log(e),alert("Sorry, something went wrong. Try again.")}e.empty=function(){e.id=null,e.en="",e.th="",e.tags=""},e.edit=function(t){angular.extend(e,t)},e.add=function(){var e=i();r.post("api/phrases",e).success(function(r){e.id=r.id,t.phrases.unshift(e)}).error(s),n.url("/")},e.update=function(){var t=i();r.put("api/phrases/"+e.id,t).success(function(){o(e.id,t)}).error(s),n.url("/")},e.destroy=function(t){t.preventDefault(),confirm("You really want to delete this phrase?")&&(r.delete("api/phrases/"+e.id).success(function(){a(e.id)}).error(s),n.url("/"))},angular.isObject(t.edit)?e.edit(t.edit):e.empty()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljL2J1aWxkLmpzIiwic291cmNlcyI6WyJzdHVkeS5qcyIsImNvbnRyb2xsZXJzL0VkaXRDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQUEsT0FBQSxZQUVBLEtBQUEsYUFBQSxZQUFBLFNBQUEsRUFBQSxHQTJCQSxRQUFBLEdBQUEsR0FDQSxJQUFBLEdBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxRQUFBLE9BQUEsSUFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLFFBQUEsRUFDQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsSUE1QkEsRUFBQSxLQUFBLE9BQ0EsRUFBQSxPQUFBLEdBQ0EsRUFBQSxRQUFBLE9BQUEsUUFDQSxFQUFBLE1BQUEsRUFFQSxFQUFBLEtBQUEsU0FBQSxHQUNBLEVBQUEsSUFBQSxRQUFBLEVBQUEsS0FHQSxFQUFBLElBQUEseUJBQUEsV0FDQSxHQUFBLEVBQ0EsVUFBQSxFQUFBLE1BQ0EsRUFBQSxNQUFBLEdBRUEsRUFBQSxFQUFBLE1BQUEsTUFBQSxtQkFDQSxFQUFBLEtBQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxNQUFBLEVBQUEsSUFBQSxPQUdBLEVBQUEsTUFBQSxFQUNBLE1BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxXQ3hCQSxRQUFBLE9BQUEsU0FBQSxXQUFBLGtCQUFBLFNBQUEsYUFBQSxRQUFBLFlBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQThEQSxRQUFBLEtBQ0EsT0FDQSxHQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFJQSxRQUFBLEdBQUEsRUFBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsUUFBQSxFQUNBLElBQUEsRUFBQSxLQUFBLEVBRUEsV0FEQSxTQUFBLE9BQUEsRUFBQSxJQU1BLFFBQUEsR0FBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUNBLEdBQUEsRUFBQSxRQUFBLEdBQUEsS0FBQSxFQUVBLFdBREEsR0FBQSxRQUFBLE9BQUEsRUFBQSxHQU1BLFFBQUEsR0FBQSxHQUNBLFFBQUEsSUFBQSxHQUNBLE1BQUEsMkNBeEZBLEVBQUEsTUFBQSxXQUNBLEVBQUEsR0FBQSxLQUNBLEVBQUEsR0FBQSxHQUNBLEVBQUEsR0FBQSxHQUNBLEVBQUEsS0FBQSxJQUdBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsUUFBQSxPQUFBLEVBQUEsSUFJQSxFQUFBLElBQUEsV0FFQSxHQUFBLEdBQUEsR0FFQSxHQUFBLEtBQUEsY0FBQSxHQUNBLFFBQUEsU0FBQSxHQUNBLEVBQUEsR0FBQSxFQUFBLEdBQ0EsRUFBQSxRQUFBLFFBQUEsS0FFQSxNQUFBLEdBRUEsRUFBQSxJQUFBLE1BS0EsRUFBQSxPQUFBLFdBRUEsR0FBQSxHQUFBLEdBRUEsR0FBQSxJQUFBLGVBQUEsRUFBQSxHQUFBLEdBQ0EsUUFBQSxXQUNBLEVBQUEsRUFBQSxHQUFBLEtBRUEsTUFBQSxHQUVBLEVBQUEsSUFBQSxNQUlBLEVBQUEsUUFBQSxTQUFBLEdBRUEsRUFBQSxpQkFFQSxRQUFBLDRDQUVBLEVBQUEsT0FBQSxlQUFBLEVBQUEsSUFDQSxRQUFBLFdBQ0EsRUFBQSxFQUFBLE1BRUEsTUFBQSxHQUVBLEVBQUEsSUFBQSxPQXVDQSxRQUFBLFNBQUEsRUFBQSxNQUNBLEVBQUEsS0FBQSxFQUFBLE1BRUEsRUFBQSIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdzdHVkeScsIFtdKVxuXG4gIC5ydW4oZnVuY3Rpb24gKCRyb290U2NvcGUsICRsb2NhdGlvbikge1xuXG4gICAgJHJvb3RTY29wZS5wYWdlICAgID0gJ21haW4nO1xuICAgICRyb290U2NvcGUuc2VhcmNoICA9ICcnO1xuICAgICRyb290U2NvcGUucGhyYXNlcyA9IHdpbmRvdy5waHJhc2VzO1xuICAgICRyb290U2NvcGUuZWRpdCAgICA9IGZhbHNlO1xuXG4gICAgJHJvb3RTY29wZS5vcGVuID0gZnVuY3Rpb24gKHBocmFzZSkge1xuICAgICAgJGxvY2F0aW9uLnVybCgnZWRpdC8nICsgcGhyYXNlLmlkKTtcbiAgICB9O1xuXG4gICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWF0Y2g7XG4gICAgICBpZiAoJGxvY2F0aW9uLnVybCgpID09PSAnL2FkZCcpIHtcbiAgICAgICAgJHJvb3RTY29wZS5lZGl0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG1hdGNoID0gJGxvY2F0aW9uLnVybCgpLm1hdGNoKC9eXFwvZWRpdFxcLyguKykvKSkge1xuICAgICAgICAkcm9vdFNjb3BlLmVkaXQgPSBmaW5kUGhyYXNlKG1hdGNoWzFdKTtcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLmVkaXQpICRsb2NhdGlvbi51cmwoJy8nKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkcm9vdFNjb3BlLmVkaXQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCRsb2NhdGlvbi51cmwoKSAhPT0gJy8nKSAkbG9jYXRpb24udXJsKCcvJyk7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIGZ1bmN0aW9uIGZpbmRQaHJhc2UoaWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHJvb3RTY29wZS5waHJhc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwaHJhc2UgPSAkcm9vdFNjb3BlLnBocmFzZXNbaV07XG4gICAgICAgIGlmIChwaHJhc2UuaWQgPT0gaWQpIHJldHVybiBwaHJhc2U7XG4gICAgICB9XG4gICAgfVxuXG4gIH0pO1xuXG4iLCJhbmd1bGFyLm1vZHVsZSgnc3R1ZHknKS5jb250cm9sbGVyKCdFZGl0Q29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRodHRwLCAkbG9jYXRpb24pIHtcblxuXG4gICRzY29wZS5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAkc2NvcGUuaWQgICA9IG51bGw7XG4gICAgJHNjb3BlLmVuICAgPSAnJztcbiAgICAkc2NvcGUudGggICA9ICcnO1xuICAgICRzY29wZS50YWdzID0gJyc7XG4gIH1cblxuICAkc2NvcGUuZWRpdCA9IGZ1bmN0aW9uIChwaHJhc2UpIHtcbiAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHBocmFzZSk7XG4gIH1cblxuXG4gICRzY29wZS5hZGQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgcGhyYXNlID0gZ2V0RGF0YSgpO1xuXG4gICAgJGh0dHAucG9zdCgnYXBpL3BocmFzZXMnLCBwaHJhc2UpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIHBocmFzZS5pZCA9IHJlcy5pZDtcbiAgICAgICAgJHJvb3RTY29wZS5waHJhc2VzLnVuc2hpZnQocGhyYXNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZXJyKTtcblxuICAgICRsb2NhdGlvbi51cmwoJy8nKTtcblxuICB9O1xuXG5cbiAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBwaHJhc2UgPSBnZXREYXRhKCk7XG5cbiAgICAkaHR0cC5wdXQoJ2FwaS9waHJhc2VzLycgKyAkc2NvcGUuaWQsIHBocmFzZSlcbiAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlUGhyYXNlKCRzY29wZS5pZCwgcGhyYXNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZXJyKTtcblxuICAgICRsb2NhdGlvbi51cmwoJy8nKTtcblxuICB9O1xuXG4gICRzY29wZS5kZXN0cm95ID0gZnVuY3Rpb24gKCRldmVudCkge1xuXG4gICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoIWNvbmZpcm0oJ1lvdSByZWFsbHkgd2FudCB0byBkZWxldGUgdGhpcyBwaHJhc2U/JykpIHJldHVybjtcblxuICAgICRodHRwLmRlbGV0ZSgnYXBpL3BocmFzZXMvJyArICRzY29wZS5pZClcbiAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlUGhyYXNlKCRzY29wZS5pZCk7XG4gICAgICB9KVxuICAgICAgLmVycm9yKGVycik7XG5cbiAgICAkbG9jYXRpb24udXJsKCcvJyk7XG5cbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuOiAkc2NvcGUuZW4sXG4gICAgICB0aDogJHNjb3BlLnRoLFxuICAgICAgdGFnczogJHNjb3BlLnRhZ3NcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlUGhyYXNlKGlkLCBkYXRhKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkcm9vdFNjb3BlLnBocmFzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwaHJhc2UgPSAkcm9vdFNjb3BlLnBocmFzZXNbaV07XG4gICAgICBpZiAocGhyYXNlLmlkID09PSBpZCkge1xuICAgICAgICBhbmd1bGFyLmV4dGVuZChwaHJhc2UsIGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVQaHJhc2UoaWQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRyb290U2NvcGUucGhyYXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCRyb290U2NvcGUucGhyYXNlc1tpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgJHJvb3RTY29wZS5waHJhc2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVycihtc2cpIHtcbiAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgIGFsZXJ0KCdTb3JyeSwgc29tZXRoaW5nIHdlbnQgd3JvbmcuIFRyeSBhZ2Fpbi4nKTtcbiAgfVxuXG5cblxuICBpZiAoYW5ndWxhci5pc09iamVjdCgkcm9vdFNjb3BlLmVkaXQpKSB7XG4gICAgJHNjb3BlLmVkaXQoJHJvb3RTY29wZS5lZGl0KTtcbiAgfSBlbHNlIHtcbiAgICAkc2NvcGUuZW1wdHkoKTtcbiAgfVxuXG5cbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==