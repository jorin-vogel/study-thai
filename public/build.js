angular.module("study",[]).run(["$rootScope","$location","$window","$timeout",function(e,n,t,o){function r(n){for(var t=0;t<e.phrases.length;t++){var o=e.phrases[t];if(o.id==n)return o}}e.page="main",e.search="",e.phrases=window.phrases,e.edit=!1,e.searchFocus=!1,e.scrollTop=0,e.focusSearch=function(){e.searchFocus=!0},e.open=function(e){n.url("edit/"+e.id)},e.$on("$locationChangeSuccess",function(){var t;if("/add"===n.url())e.scrollTop=document.body.scrollTop,e.edit=!0;else if(t=n.url().match(/^\/edit\/(.+)/))e.scrollTop=document.body.scrollTop,e.edit=r(t[1]),e.edit||n.url("/");else{if("/"!==n.url())return n.url("/");e.edit=!1,o(function(){document.body.scrollTop=e.scrollTop},0)}})}]),angular.module("study").controller("EditController",["$scope","$rootScope","$http","$location",function(e,n,t,o){function r(){return{en:e.en,th:e.th,tags:e.tags}}function i(e,t){for(var o=0;o<n.phrases.length;o++){var r=n.phrases[o];if(r.id===e)return void angular.extend(r,t)}}function s(e){for(var t=0;t<n.phrases.length;t++)if(n.phrases[t].id===e)return void n.phrases.splice(t,1)}function u(e,n,t){console.log("ERROR at: "+n+' "'+t+'" : ',e),alert("Sorry, something went wrong while trying to "+n+" "+t+". Try again.")}e.empty=function(){e.id=null,e.en="",e.th="",e.tags=""},e.edit=function(n){angular.extend(e,n)},e.add=function(){var e=r();t.post("api/phrases",e).success(function(t){e.id=t.id,n.phrases.unshift(e)}).error(function(n){u(n,"add",e.en)}),o.url("/")},e.update=function(){var n=r();t.put("api/phrases/"+e.id,n).success(function(){i(e.id,n)}).error(function(e){u(e,"update",n.en)}),o.url("/")},e.destroy=function(n){n.preventDefault(),confirm("You really want to delete this phrase?")&&(t.delete("api/phrases/"+e.id).success(function(){s(e.id)}).error(function(e){u(e,"delete",phrase.en)}),o.url("/"))},angular.isObject(n.edit)?e.edit(n.edit):e.empty()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljL2J1aWxkLmpzIiwic291cmNlcyI6WyJzdHVkeS5qcyIsImNvbnRyb2xsZXJzL0VkaXRDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQUEsT0FBQSxZQUVBLEtBQUEsYUFBQSxZQUFBLFVBQUEsV0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEdBc0NBLFFBQUEsR0FBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsUUFBQSxFQUNBLElBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxJQXZDQSxFQUFBLEtBQUEsT0FDQSxFQUFBLE9BQUEsR0FDQSxFQUFBLFFBQUEsT0FBQSxRQUNBLEVBQUEsTUFBQSxFQUNBLEVBQUEsYUFBQSxFQUNBLEVBQUEsVUFBQSxFQUVBLEVBQUEsWUFBQSxXQUNBLEVBQUEsYUFBQSxHQUdBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxJQUFBLFFBQUEsRUFBQSxLQUdBLEVBQUEsSUFBQSx5QkFBQSxXQUNBLEdBQUEsRUFDQSxJQUFBLFNBQUEsRUFBQSxNQUNBLEVBQUEsVUFBQSxTQUFBLEtBQUEsVUFDQSxFQUFBLE1BQUEsTUFFQSxJQUFBLEVBQUEsRUFBQSxNQUFBLE1BQUEsaUJBQ0EsRUFBQSxVQUFBLFNBQUEsS0FBQSxVQUNBLEVBQUEsS0FBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLE1BQUEsRUFBQSxJQUFBLFNBRUEsQ0FDQSxHQUFBLE1BQUEsRUFBQSxNQUFBLE1BQUEsR0FBQSxJQUFBLElBQ0EsR0FBQSxNQUFBLEVBQ0EsRUFBQSxXQUNBLFNBQUEsS0FBQSxVQUFBLEVBQUEsV0FDQSxTQ25DQSxRQUFBLE9BQUEsU0FBQSxXQUFBLGtCQUFBLFNBQUEsYUFBQSxRQUFBLFlBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQW9FQSxRQUFBLEtBQ0EsT0FDQSxHQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFJQSxRQUFBLEdBQUEsRUFBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsUUFBQSxFQUNBLElBQUEsRUFBQSxLQUFBLEVBRUEsV0FEQSxTQUFBLE9BQUEsRUFBQSxJQU1BLFFBQUEsR0FBQSxHQUNBLElBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUNBLEdBQUEsRUFBQSxRQUFBLEdBQUEsS0FBQSxFQUVBLFdBREEsR0FBQSxRQUFBLE9BQUEsRUFBQSxHQU1BLFFBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxRQUFBLElBQUEsYUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEdBQ0EsTUFBQSwrQ0FBQSxFQUFBLElBQUEsRUFBQSxnQkE5RkEsRUFBQSxNQUFBLFdBQ0EsRUFBQSxHQUFBLEtBQ0EsRUFBQSxHQUFBLEdBQ0EsRUFBQSxHQUFBLEdBQ0EsRUFBQSxLQUFBLElBR0EsRUFBQSxLQUFBLFNBQUEsR0FDQSxRQUFBLE9BQUEsRUFBQSxJQUlBLEVBQUEsSUFBQSxXQUVBLEdBQUEsR0FBQSxHQUVBLEdBQUEsS0FBQSxjQUFBLEdBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxHQUFBLEVBQUEsR0FDQSxFQUFBLFFBQUEsUUFBQSxLQUVBLE1BQUEsU0FBQSxHQUNBLEVBQUEsRUFBQSxNQUFBLEVBQUEsTUFHQSxFQUFBLElBQUEsTUFLQSxFQUFBLE9BQUEsV0FFQSxHQUFBLEdBQUEsR0FFQSxHQUFBLElBQUEsZUFBQSxFQUFBLEdBQUEsR0FDQSxRQUFBLFdBQ0EsRUFBQSxFQUFBLEdBQUEsS0FFQSxNQUFBLFNBQUEsR0FDQSxFQUFBLEVBQUEsU0FBQSxFQUFBLE1BR0EsRUFBQSxJQUFBLE1BSUEsRUFBQSxRQUFBLFNBQUEsR0FFQSxFQUFBLGlCQUVBLFFBQUEsNENBRUEsRUFBQSxPQUFBLGVBQUEsRUFBQSxJQUNBLFFBQUEsV0FDQSxFQUFBLEVBQUEsTUFFQSxNQUFBLFNBQUEsR0FDQSxFQUFBLEVBQUEsU0FBQSxPQUFBLE1BR0EsRUFBQSxJQUFBLE9BdUNBLFFBQUEsU0FBQSxFQUFBLE1BQ0EsRUFBQSxLQUFBLEVBQUEsTUFFQSxFQUFBIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3N0dWR5JywgW10pXG5cbiAgLnJ1bihmdW5jdGlvbiAoJHJvb3RTY29wZSwgJGxvY2F0aW9uLCAkd2luZG93LCAkdGltZW91dCkge1xuXG4gICAgJHJvb3RTY29wZS5wYWdlICAgICAgICA9ICdtYWluJztcbiAgICAkcm9vdFNjb3BlLnNlYXJjaCAgICAgID0gJyc7XG4gICAgJHJvb3RTY29wZS5waHJhc2VzICAgICA9IHdpbmRvdy5waHJhc2VzO1xuICAgICRyb290U2NvcGUuZWRpdCAgICAgICAgPSBmYWxzZTtcbiAgICAkcm9vdFNjb3BlLnNlYXJjaEZvY3VzID0gZmFsc2U7XG4gICAgJHJvb3RTY29wZS5zY3JvbGxUb3AgICA9IDA7XG5cbiAgICAkcm9vdFNjb3BlLmZvY3VzU2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgJHJvb3RTY29wZS5zZWFyY2hGb2N1cyA9IHRydWU7XG4gICAgfTtcblxuICAgICRyb290U2NvcGUub3BlbiA9IGZ1bmN0aW9uIChwaHJhc2UpIHtcbiAgICAgICRsb2NhdGlvbi51cmwoJ2VkaXQvJyArIHBocmFzZS5pZCk7XG4gICAgfTtcblxuICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1hdGNoO1xuICAgICAgaWYgKCRsb2NhdGlvbi51cmwoKSA9PT0gJy9hZGQnKSB7XG4gICAgICAgICRyb290U2NvcGUuc2Nyb2xsVG9wID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICAgICRyb290U2NvcGUuZWRpdCA9IHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChtYXRjaCA9ICRsb2NhdGlvbi51cmwoKS5tYXRjaCgvXlxcL2VkaXRcXC8oLispLykpIHtcbiAgICAgICAgJHJvb3RTY29wZS5zY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgJHJvb3RTY29wZS5lZGl0ID0gZmluZFBocmFzZShtYXRjaFsxXSk7XG4gICAgICAgIGlmICghJHJvb3RTY29wZS5lZGl0KSAkbG9jYXRpb24udXJsKCcvJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCRsb2NhdGlvbi51cmwoKSAhPT0gJy8nKSByZXR1cm4gJGxvY2F0aW9uLnVybCgnLycpO1xuICAgICAgICAkcm9vdFNjb3BlLmVkaXQgPSBmYWxzZTtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gJHJvb3RTY29wZS5zY3JvbGxUb3A7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICBmdW5jdGlvbiBmaW5kUGhyYXNlKGlkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRyb290U2NvcGUucGhyYXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGhyYXNlID0gJHJvb3RTY29wZS5waHJhc2VzW2ldO1xuICAgICAgICBpZiAocGhyYXNlLmlkID09IGlkKSByZXR1cm4gcGhyYXNlO1xuICAgICAgfVxuICAgIH1cblxuICB9KTtcblxuIiwiYW5ndWxhci5tb2R1bGUoJ3N0dWR5JykuY29udHJvbGxlcignRWRpdENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKSB7XG5cblxuICAkc2NvcGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgJHNjb3BlLmlkICAgPSBudWxsO1xuICAgICRzY29wZS5lbiAgID0gJyc7XG4gICAgJHNjb3BlLnRoICAgPSAnJztcbiAgICAkc2NvcGUudGFncyA9ICcnO1xuICB9XG5cbiAgJHNjb3BlLmVkaXQgPSBmdW5jdGlvbiAocGhyYXNlKSB7XG4gICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCBwaHJhc2UpO1xuICB9XG5cblxuICAkc2NvcGUuYWRkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHBocmFzZSA9IGdldERhdGEoKTtcblxuICAgICRodHRwLnBvc3QoJ2FwaS9waHJhc2VzJywgcGhyYXNlKVxuICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBwaHJhc2UuaWQgPSByZXMuaWQ7XG4gICAgICAgICRyb290U2NvcGUucGhyYXNlcy51bnNoaWZ0KHBocmFzZSk7XG4gICAgICB9KVxuICAgICAgLmVycm9yKGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgZXJyKG1zZywgJ2FkZCcsIHBocmFzZS5lbik7XG4gICAgICB9KTtcblxuICAgICRsb2NhdGlvbi51cmwoJy8nKTtcblxuICB9O1xuXG5cbiAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBwaHJhc2UgPSBnZXREYXRhKCk7XG5cbiAgICAkaHR0cC5wdXQoJ2FwaS9waHJhc2VzLycgKyAkc2NvcGUuaWQsIHBocmFzZSlcbiAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlUGhyYXNlKCRzY29wZS5pZCwgcGhyYXNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24gKG1zZykge1xuICAgICAgICBlcnIobXNnLCAndXBkYXRlJywgcGhyYXNlLmVuKTtcbiAgICAgIH0pO1xuXG4gICAgJGxvY2F0aW9uLnVybCgnLycpO1xuXG4gIH07XG5cbiAgJHNjb3BlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG5cbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghY29uZmlybSgnWW91IHJlYWxseSB3YW50IHRvIGRlbGV0ZSB0aGlzIHBocmFzZT8nKSkgcmV0dXJuO1xuXG4gICAgJGh0dHAuZGVsZXRlKCdhcGkvcGhyYXNlcy8nICsgJHNjb3BlLmlkKVxuICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVQaHJhc2UoJHNjb3BlLmlkKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24gKG1zZykge1xuICAgICAgICBlcnIobXNnLCAnZGVsZXRlJywgcGhyYXNlLmVuKTtcbiAgICAgIH0pO1xuXG4gICAgJGxvY2F0aW9uLnVybCgnLycpO1xuXG4gIH07XG5cblxuICBmdW5jdGlvbiBnZXREYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbjogJHNjb3BlLmVuLFxuICAgICAgdGg6ICRzY29wZS50aCxcbiAgICAgIHRhZ3M6ICRzY29wZS50YWdzXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBocmFzZShpZCwgZGF0YSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHJvb3RTY29wZS5waHJhc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGhyYXNlID0gJHJvb3RTY29wZS5waHJhc2VzW2ldO1xuICAgICAgaWYgKHBocmFzZS5pZCA9PT0gaWQpIHtcbiAgICAgICAgYW5ndWxhci5leHRlbmQocGhyYXNlLCBkYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlUGhyYXNlKGlkKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkcm9vdFNjb3BlLnBocmFzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICgkcm9vdFNjb3BlLnBocmFzZXNbaV0uaWQgPT09IGlkKSB7XG4gICAgICAgICRyb290U2NvcGUucGhyYXNlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlcnIobXNnLCBhY3Rpb24sIHBocmFzZSkge1xuICAgIGNvbnNvbGUubG9nKCdFUlJPUiBhdDogJythY3Rpb24rJyBcIicrcGhyYXNlKydcIiA6ICcsICBtc2cpO1xuICAgIGFsZXJ0KCdTb3JyeSwgc29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgdHJ5aW5nIHRvICcrYWN0aW9uKycgJytwaHJhc2UrJy4gVHJ5IGFnYWluLicpO1xuICB9XG5cblxuXG4gIGlmIChhbmd1bGFyLmlzT2JqZWN0KCRyb290U2NvcGUuZWRpdCkpIHtcbiAgICAkc2NvcGUuZWRpdCgkcm9vdFNjb3BlLmVkaXQpO1xuICB9IGVsc2Uge1xuICAgICRzY29wZS5lbXB0eSgpO1xuICB9XG5cblxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9